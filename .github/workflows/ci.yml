name: CI

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  deployments: write

on:
  push:
    branches: [ main, develop, "feature/**", "release/**", "hotfix/**" ]
  pull_request:
    branches: [ main, develop ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{ steps.branch.outputs.BRANCH_NAME }}
    steps:
      - id: branch
        run: echo "BRANCH_NAME=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT

  verify-commits:
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install commitlint
        run: npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Validate PR commits
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  database-migration:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:17.5
        ports: [ '5432:5432' ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_POSTGRES_PASSWORD }}
          POSTGRES_DB: wolfconnect-dev
          DB_NAME_TEST: wolfconnect-test
          DB_MASTER_USERNAME: ${{ vars.DB_MASTER_USERNAME }}
          DB_MASTER_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_APP_USERNAME: ${{ vars.DB_APP_USERNAME }}
          DB_APP_PASSWORD: ${{ secrets.DB_APP_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', '**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle
      - run: chmod +x ./gradlew

      - name: Ensure psql is installed
        run: sudo apt update && sudo apt install -y postgresql-client

      - name: Rendre les scripts shell exécutables
        run: |
          chmod +x ./init/common/init-users.sh
          chmod +x ./init/dev/init-multidb.sh

      - name: Init utilisateurs sur wolfconnect-dev
        run: bash ./init/common/init-users.sh
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_DB: wolfconnect-dev
          DB_MASTER_USERNAME: ${{ vars.DB_MASTER_USERNAME }}
          DB_MASTER_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_APP_USERNAME: ${{ vars.DB_APP_USERNAME }}
          DB_APP_PASSWORD: ${{ secrets.DB_APP_PASSWORD }}
          INIT_SQL_PATH: ./init/common/create_users.sql
          PGPASSWORD: ${{ secrets.DB_POSTGRES_PASSWORD }}

      - name: Init utilisateurs sur wolfconnect-test
        run: bash ./init/dev/init-multidb.sh
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          POSTGRES_USER: postgres
          DB_NAME_TEST: wolfconnect-test
          DB_MASTER_USERNAME: ${{ vars.DB_MASTER_USERNAME }}
          PGPASSWORD: ${{ secrets.DB_POSTGRES_PASSWORD }}
          INIT_SQL_PATH: ./init/common/create_users.sql

      - name: Vérification des variables pour Flyway
        run: |
          echo "DB_HOST=$DB_HOST"
          echo "DB_PORT=$DB_PORT"
          echo "DB_NAME=$DB_NAME"
          echo "DB_MASTER_USERNAME=$DB_MASTER_USERNAME"
          echo "DB_MASTER_PASSWORD is set? [${#DB_MASTER_PASSWORD}]"
          echo "DB_APP_USERNAME=$DB_APP_USERNAME"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wolfconnect-dev
          DB_MASTER_USERNAME: ${{ vars.DB_MASTER_USERNAME }}
          DB_MASTER_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_APP_USERNAME: ${{ vars.DB_APP_USERNAME }}

      - name: Validate Flyway Migrations
        run: |
          ./gradlew flywayValidate \
            -Dorg.gradle.parallel=true \
            -Dorg.gradle.workers.max=4
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wolfconnect-dev
          DB_MASTER_USERNAME: ${{ vars.DB_MASTER_USERNAME }}
          DB_MASTER_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_APP_USERNAME: ${{ vars.DB_APP_USERNAME }}

      - name: Apply Flyway Migrations
        run: |
          ./gradlew flywayClean flywayMigrate \
          -Dorg.gradle.parallel=true \
          -Dorg.gradle.workers.max=4
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wolfconnect-test
          DB_MASTER_USERNAME: ${{ vars.DB_MASTER_USERNAME }}
          DB_MASTER_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          DB_APP_USERNAME: ${{ vars.DB_APP_USERNAME }}

  test:
    needs: [ setup, database-migration ]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', '**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle
      - run: chmod +x ./gradlew

      - name: Run Tests with Coverage
        run: |
          ./gradlew clean test koverXmlReport \
          -Dorg.gradle.parallel=true \
          -Dorg.gradle.workers.max=4

      - name: Run Integration & Performance Tests
        if: startsWith(needs.setup.outputs.BRANCH_NAME, 'main') || startsWith(needs.setup.outputs.BRANCH_NAME, 'release/')
        run: |
          ./gradlew integrationTest performanceTest koverXmlReport \
          -Dorg.gradle.parallel=true \
          -Dorg.gradle.workers.max=4

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/

      - name: Upload Kover coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/kover/xml/report.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/kover/xml/report.xml
          fail_ci_if_error: true

  code-quality:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', '**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle
      - run: chmod +x ./gradlew

      - name: Run Code Quality Checks
        run: ./gradlew detekt ktlintCheck -Dorg.gradle.parallel=true

  documentation:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install NPM dependencies
        run: npm ci

      - run: chmod +x ./gradlew

      - name: Generate Dokka documentation
        run: ./gradlew dokkaHtml

      - name: Validate OpenAPI spec
        run: npm run lint-doc

      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            build/dokka/html/
            build/api-spec/

  versioning:
    needs: [ setup, test ]
    if: startsWith(needs.setup.outputs.BRANCH_NAME, 'main') || startsWith(needs.setup.outputs.BRANCH_NAME, 'release/')
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.semantic_release.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Generate Version
        id: semantic_release
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/github
          semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: [ setup, test, versioning ]
    if: startsWith(needs.setup.outputs.BRANCH_NAME, 'main') || startsWith(needs.setup.outputs.BRANCH_NAME, 'release/')
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t wolfconnect:ci .

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: wolfconnect:ci
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ vars.DOCKER_USERNAME }}/wolfconnect:latest
            ${{ vars.DOCKER_USERNAME }}/wolfconnect:${{ needs.versioning.outputs.NEW_VERSION }}
          cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/wolfconnect:buildcache
          cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/wolfconnect:buildcache,mode=max

  metrics:
    needs: [ test, code-quality, documentation, docker ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Pipeline Metrics
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { duration } = context.payload;
            console.log(`Pipeline duration: ${duration}ms`);
